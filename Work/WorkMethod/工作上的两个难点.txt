一、代码的可维护性
	怎么样让写出来的代码更易于扩展、易于修改。主要是从两个方面：一个是前期的架构，前期架构要合理，对功能模块进行分步分层，减少耦合，保持各模块的相对独立，减少依赖。合理利用设计模式；第二个是后期的不断重构，在不断的修改需求之后，代码的可读性和可维护性可能会变得很差，这就需要经常做小型的重构。


二、解决线上问题
	主要麻烦的是接口，麻烦的点一个在于不方便测试，线上的代码不能随便动，线下的环境又没有相应的数据，只能线上新建一个测试接口。第二个麻烦的在于涉及的东西多，出错的可能性也多，可能是某个机器问题，也可能是某个服务的问题，要一步一步去排查，很多情况可能都是之前没有见过的。在这种情况下一个要保持沉着冷静，要明白问题很简单，只是暂时没有想到而已，战略上藐视对手，战术上重视对手。然后要多看nginx请求日志，然后在创建能够快速进行测试重现请求步骤的代码或者postman请求。另一个麻烦的地方在于你的接口可能还请求了其他公司的接口，而这些接口可能就没那么容易调试，接口报错你可能不知道是什么原因，这个时候就需要多查文档，排查各种可能性，以及和对方公司联调。